from bottle import get, post, route, run, request, static_file
import scipy as sp
from scipy import misc
from scipy import pi
import doamusic
import config

class MusicServer:
    
    def __init__(self,antennafile,domain):
        self.all_antennas = sp.loadtxt(antennafile)
        self.spec = None
        self.evenspec = None
        self.oddspec = None
        self.domain = domain

    def newsubmission(self,parsedjson):
        """
        Convert parsed JSON sample submission (as generated by
        acquire.samplesink.JSONSender and parsed by bottle) into seperated
        samples for odd and even antenna IDs.  This indicates differing
        polarization.
        """
        self.oddsamp = [] # sample data
        self.oddants = [] # corresponding antenna locations
        self.evensamp = []
        self.evenants = []
        
        timestamp,sampdict = parsedjson
        for antid,datum in sampdict.items():
            antid = int(antid)
            print(antid,datum)
            if antid % 2 == 0:
                self.evensamp.append(complex(datum[0],datum[1]))
                self.evenants.append(self.all_antennas[antid])
            else: 
                self.oddsamp.append(complex(datum[0],datum[1]))
                self.oddants.append(self.all_antennas[antid])

        #invalidate caches
        self.spec = None
        self.evenspec = None
        self.oddspec = None

    def renderspectrum(self):

        even_cov = doamusic.covar(self.evensamp)
        odd_cov = doamusic.covar(self.oddsamp)
        print("Even samp: {}".format(self.evensamp))
        print("Odd samp: {}".format(self.oddsamp))
        print("Even shape: {}".format(even_cov.shape))
        print("Odd shape: {}".format(odd_cov.shape))
        
        if len(self.evensamp) >= 2:
            even_est = doamusic.Estimator(
                antennas = self.evenants,
                covariance = even_cov,
                field_of_view = self.domain,
                nsignals = 1
            )
            self.evenspec = even_est.spectrum((512,512))
        else:
            self.evenspec = sp.zeros((512,512))
        if len(self.oddsamp) >= 2:
            odd_est = doamusic.Estimator(
                antennas = self.oddants,
                covariance = odd_cov,
                field_of_view = self.domain,
                nsignals = 1
            )
            self.oddspec = odd_est.spectrum((512,512))
        else:
            self.oddspec = sp.zeros((512,512))

        self.spec = self.evenspec + self.oddspec

    def renderboth(self):
        if not self.spec:
            self.renderspectrum()
        fn = "/tmp/music-spectrum.png"
        sp.misc.imsave(fn,self.spec/self.spec.max())
        return fn

    def rendereven(self):
        if not self.evenspec:
            self.renderspectrum()
        fn = "/tmp/spectrum-even.png"
        sp.misc.imsave(fn,self.evenspec/self.evenspec.max())
        return fn

    def renderodd(self):
        if not self.oddspec:
            self.renderspectrum()
        fn = "/tmp/spectrum-odd.png"
        sp.misc.imsave(fn,self.oddspec/self.oddspec.max())
        return fn

if __name__ == "__main__": 
    server = MusicServer(
        config.antennafile,
        ( (0,pi),(-pi,pi) )
        )

    @route(config.submitpath, method='POST')
    def do_newsample():
        server.newsubmission(request.json)
        return "OK"

    @route(config.spectrumpath, method='GET')
    def do_spectrum():
        return static_file(server.renderboth(),'/')

    @route(config.spectrumpath_even, method='GET')
    def do_spectrum():
        return static_file(server.rendereven(),'/')

    @route(config.spectrumpath_odd, method='GET')
    def do_spectrum():
        return static_file(server.renderodd(),'/')

    run(host='0.0.0.0', port=8080, debug=True)

